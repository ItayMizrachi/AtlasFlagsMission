export default class Class {
    constructor(_parent, _item,  stateBorders, doApi) {
        this.parent = _parent;
        this.name = _item.name.common;
        this.flag = _item.flags.svg;
        this.pop = _item.population.toLocaleString();
        this.region = _item.region;
        this.language = Object.keys(_item.languages);
        this.coin = Object.keys(_item.currencies);
        this.coinSymbol = Object.values(_item.currencies)[0].symbol;
        this.coinDescription = Object.values(_item.currencies)[0].name;
        this.capital = _item.capital;
        this.map = _item.latlng;
        this.borders = _item.borders;
        this.doApi = doApi;
        this.stateBorders = stateBorders;
    }

    render() {
        let div = document.createElement("div");
        div.className = "col-md-8 mx-auto p-4 conic text-white";
        // div.style = " background: rgba(255, 255, 255, 0.885);";
        document.querySelector(this.parent).append(div);

        div.innerHTML = `
        <h2 class="text-center" style="color: #5bc0de;">${this.name}</h2>
        <img  src="${this.flag}"  alt="${this.name}" class="w-50 py-3 d-flex  ">
        
        <table class="table table-striped table-dark pt-2 col-6">
    <tbody>
    <tr>
      <th class="col-3" scope="row">population: </th>
      <td class="col-3"> ${this.pop}</td>
    </tr>
    <tr>
      <th  class="col-3"scope="row">region: </th>
      <td class="col-3"> ${this.region}</td>
    </tr>  
    <tr>
      <th class="col-3" scope="row">Languages: </th>
      <td class="col-3"> ${this.language}</td>
    </tr>  
    <tr>
    <th class="col-3" scope="row">Coins: </th>
    <td class="col-3">${this.coin}, ${this.coinDescription}  ${this.coinSymbol}</td>
  </tr>  
  <tr>
  <th class="col-3" scope="row">Capital:   </th>
  <td class="col-3">${this.capital} </td>
</tr>   
   </tbody>
  </table>


        <div class="mt-3 "><strong>States with borders:</strong><br>
        <div class="borders_div"></div>
        </div>
        
        <iframe class="mt-4 col-12" height="400" src="https://maps.google.com/maps?q=${this.map[0]},${this.map[1]}&z=7&ie=UTF8&iwloc=&output=embed" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" ></iframe>
       `

        let borders_div = div.querySelector(".borders_div");
        this.borders.forEach(async (item) => {
            let a = document.createElement("a");
            a.innerHTML = await this.stateBorders(item) + " ";
            a.style = "font-weight: bold; font-size: 1.1em; color: #5bc0de; cursor: pointer; padding: 2px; "
            borders_div.append(a);
            a.addEventListener("click", () => {
                this.doApi(a.innerHTML);
            })
        })



    }
}





<iframe class="mt-4 col-12" height="400" src="https://maps.google.com/maps?q=${this.map[0]},${this.map[1]}&z=7&ie=UTF8&iwloc=&output=embed" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" ></iframe>





 let borders_div = div.querySelector(".borders_div");
        this.borders.forEach(async (item) => {
            let a = document.createElement("a");
            a.innerHTML = await this.stateBorders(item) + " ";
            a.style = "font-weight: bold; font-size: 1.1em; color: #5bc0de; cursor: pointer; padding: 2px; "
            borders_div.append(a);
            a.addEventListener("click", () => {
                this.doApi(a.innerHTML);
            })
        })


displayStates(data) {
    let states = data.borders;
    let stateArray = [];
    for (let i = 0; i < states.length; i++) {
        let state = states[i];
        if (i < states.length - 1) {
            stateArray.push(state + ', ');
        } else {
            stateArray.push(state);
        }
    }
    return stateArray.join('');
}




 <iframe class="mt-4 col-12" height="600" src="https://maps.google.com/maps?q=${this.map[0]},${this.map[1]}&z=6&ie=UTF8&iwloc=&output=embed" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" ></iframe>